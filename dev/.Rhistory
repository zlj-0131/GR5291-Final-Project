knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(tidyr)
library(tidyverse)
library(dplyr)
library(mlbench)
library(ggplot2)
# Load the dataset
df <- read.csv("D:/Columbia University/GR5291-Final-Project/data/NFWBS_PUF_2016_data.csv")
# Load libraries
library(tidyr)
library(tidyverse)
library(dplyr)
library(mlbench)
library(ggplot2)
# Load the dataset
df <- read.csv("D:/Columbia University/GR 5291/GR5291-Final-Project/data/NFWBS_PUF_2016_data.csv")
head(df)
# Show dimension of the dataframe
dim(df)
# Set PUF_ID as index
df <- df %>%
remove_rownames %>%
column_to_rownames(var="PUF_ID")
head(df)
# Check NA values
colSums(is.na(df))
# calculate correlation matrix
correlationMatrix <- cor(df)
# summarize the correlation matrix
print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# Load libraries
library(tidyr)
library(tidyverse)
library(dplyr)
library(mlbench)
library(ggplot2)
library(randomForest)
library(caret)
# Load the dataset
df <- read.csv("D:/Columbia University/GR 5291/GR5291-Final-Project/data/NFWBS_PUF_2016_data.csv")
head(df)
# Show dimension of the dataframe
dim(df)
# Set PUF_ID as index
df <- df %>%
remove_rownames %>%
column_to_rownames(var="PUF_ID")
head(df)
# Check NA values
colSums(is.na(df))
# calculate correlation matrix
correlationMatrix <- cor(df)
# summarize the correlation matrix
print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
# Construct a heatmap of the dataset
heatmap(as.matrix(df))
# calculate correlation matrix
correlationMatrix <- cor(df)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
# Construct a heatmap of the dataset
heatmap(as.matrix(df), scale="column")
# calculate correlation matrix
correlationMatrix <- cor(df)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
# Construct a heatmap of the dataset
heatmap(as.matrix(df), Colv = NA, Rowv = NA, scale="column")
# calculate correlation matrix
correlationMatrix <- cor(new_df)
# Fit random forest to the dataset
fit <- randomForest(HEALTH~., data=df)
# Show the variable importance table
vi <- varImp(fit, scale = FALSE)
vi <- rownames_to_column(vi, "features")
vi[order(-vi$Overall),]
# Plot the variable importance
varImpPlot(fit,type=2)
# Determine 20 most importanct features
selected_features <- vi$features[1:20]
# Generate new dataset
column_keep <- c("HEALTH", selected_features)
new_df <- df[column_keep]
head(new_df)
# Export to csv
write.csv(new_df,"D:/Columbia University/GR5291-Final-Project/data/Feature_selection_data.csv", row.names = FALSE)
# Determine 20 most importanct features
selected_features <- vi$features[1:20]
# Generate new dataset
column_keep <- c("HEALTH", selected_features)
new_df <- df[column_keep]
head(new_df)
# Export to csv
write.csv(new_df,"D:/Columbia University/GR 5291/GR5291-Final-Project/data/Feature_selection_data.csv", row.names = FALSE)
# calculate correlation matrix
correlationMatrix <- cor(new_df)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
# Construct a heatmap of the dataset
heatmap(as.matrix(new_df), Colv = NA, Rowv = NA, scale="column")
# calculate correlation matrix
correlationMatrix <- cor(new_df)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
# Construct a heatmap of the dataset
heatmap(new_df, Colv = NA, Rowv = NA, scale="column")
# calculate correlation matrix
correlationMatrix <- cor(new_df)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
# Construct a heatmap of the dataset
heatmap(as.matrix(new_df), Colv = NA, Rowv = NA, scale="column")
# calculate correlation matrix
correlationMatrix <- cor(new_df)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
# Construct a heatmap of the dataset
heatmap(as.matrix(new_df), scale="column")
library(reshape2)
# calculate correlation matrix
correlationMatrix <- cor(new_df)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
cormat <- round(correlationMatrix,2)
head(cormat)
melted_cormat <- melt(cormat)
head(melted_cormat)
# Construct a heatmap of the dataset
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
# calculate correlation matrix
correlationMatrix <- cor(new_df)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
cormat <- round(correlationMatrix,2)
head(cormat)
melted_cormat <- melt(cormat)
head(melted_cormat)
# Construct a heatmap of the dataset
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# calculate correlation matrix
correlationMatrix <- cor(new_df)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
cormat <- round(correlationMatrix,2)
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
# calculate correlation matrix
correlationMatrix <- cor(new_df)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
cormat <- round(correlationMatrix,2)
# reorder the correlation matrix helper function
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <- cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# calculate correlation matrix
correlationMatrix <- cor(new_df)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
cormat <- round(correlationMatrix,2)
# reorder the correlation matrix helper function
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <- cormat[hc$order, hc$order]
}
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Construct a heatmap of the dataset
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
